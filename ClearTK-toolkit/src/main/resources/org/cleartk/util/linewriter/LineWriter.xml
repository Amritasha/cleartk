<?xml version="1.0" encoding="UTF-8"?>
<analysisEngineDescription xmlns="http://uima.apache.org/resourceSpecifier">
    <frameworkImplementation>org.apache.uima.java</frameworkImplementation>
    <primitive>true</primitive>
    <annotatorImplementationName>org.cleartk.util.linewriter.LineWriter</annotatorImplementationName>
    <analysisEngineMetaData>
        <name>LineWriter</name>
        <description>This descriptor file was generated automatically by org.cleartk.util.GenerateDescriptorFiles. 

Copyright (c) 2009, Regents of the University of Colorado 
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

 - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 
 - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 
 - Neither the name of the University of Colorado at Boulder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. 

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 

</description>
        <configurationParameters>
            <configurationParameter>
                <name>org.cleartk.util.linewriter.LineWriter.outputDirectoryName</name>
                <description>takes a path to directory into which output files will be written. If no value is given for this parameter, then the parameter 'outputFileName' is required. If a value is given, then one file for each document/JCas will be created in the output directory provided.   The name of each file will be given by the value returned by ViewURIUtil.getURI(jCas). If a value for both 'outputDirectoryName' and ' outputFileName'  is given, then an exception will be thrown. Example values that could be provided might look like: 

	/mydata/uima-output/
	C:/Documents and Settings/User/My Documents/workspace/My Project/data/experiment/output
</description>
                <type>String</type>
                <multiValued>false</multiValued>
                <mandatory>false</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>org.cleartk.util.linewriter.LineWriter.fileSuffix</name>
                <description>provides a file name suffix for each file generated by this writer.  If there is no value given for the parameter 'outputDirectoryName', then this parameter is ignored. If 'outputDirectoryName' is given a value, then the generated files will be named by the document ids and the suffix provided by this  parameter. If no value for this parameter is given, then the files will be named the same as the document id. Example values that could be provided might include: 

.txt
.tokens
.annotations.txt</description>
                <type>String</type>
                <multiValued>false</multiValued>
                <mandatory>false</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>org.cleartk.util.linewriter.LineWriter.outputFileName</name>
                <description>takes a file name to write results to.  If no value is given for this parameter, then the parameter 'outputDirectoryName' is required.  If a value is given, then one file for all documents will be created in the output directory provided. If a value for both 'outputDirectoryName' and 'outputFileName' is given, then an exception will be thrown. Example values that could be provided might look like: 

/mydata/uima-output/annotations.txt
C:\Documents and Settings\User\My Documents\workspace\My Project\data\experiment\output\output.annotations
</description>
                <type>String</type>
                <multiValued>false</multiValued>
                <mandatory>false</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>org.cleartk.util.linewriter.LineWriter.outputAnnotationClassName</name>
                <description>takes the name of the annotation class of the annotations that are to be written out. The annotation class must be a subclass of org.apache.uima.jcas.tcas.Annotation. The manner in which annotations are written out is determined by the AnnotationWriter as described below. The AnnotationWriter interface is generically typed. The class specified by this parameter must be the same as or a subclass of the type specified by the implementation of AnnotationWriter. Example values that could be provided might include:

org.apache.uima.jcas.tcas.Annotation (default)
org.cleartk.type.Token
org.cleartk.type.Sentence
com.yourcompany.yourpackage.YourType</description>
                <type>String</type>
                <multiValued>false</multiValued>
                <mandatory>true</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>org.cleartk.util.linewriter.LineWriter.annotationWriterClassName</name>
                <description>provides the class name of a class that extends org.cleartk.util.linewriter.AnnotationWriter. The AnnotationWriter determines how annotations will be written. For example, CoveredTextAnnotationWriter simply writes out the covered text of an annotation. Example values that could be provided might include:

org.cleartk.util.linewriter.annotation.CoveredTextAnnotationWriter (default)
org.cleartk.util.linewriter.annotation.TokenPOSWriter
</description>
                <type>String</type>
                <multiValued>false</multiValued>
                <mandatory>true</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>org.cleartk.util.linewriter.LineWriter.blockAnnotationClassName</name>
                <description>Takes the name of an annotation class that determines a 'block' of lines in the resulting output file(s). Each 'block' of lines is separated by some text (such as a newline) as determined by the BlockWriter specified as described below. If, for example, the value of 'outputAnnotationClassName' is 'org.cleartk.type.Token' and the value for 'blockAnnotationClassName' is 'org.cleartk.type.Sentence' and the value for 'blockWriterClassName'  is 'org.cleartk.util.linewriter.block.BlankLineBlockWriter' (the default), then the tokens in each sentence will be written out one per line with a blank line between the last token of a sentence and the first token of the following sentence. Note that setting this parameter may limit the number of annotations that are written out if, for example, not all tokens are found inside sentences.  If no value is given, then there will be no blank lines in the resulting file (assuming the AnnotationWriter does not produce a blank line). If you want there to be a blank line between each document (assuming 'outputFileName'  is given a parameter), then this parameter should be given the value 'org.apache.uima.jcas.tcas.DocumentAnnotation'. Example values that could be provided might include: 

org.cleartk.type.Sentence
org.apache.uima.jcas.tcas.DocumentAnnotation
com.yourcompany.yourpackage.YourType
</description>
                <type>String</type>
                <multiValued>false</multiValued>
                <mandatory>false</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>org.cleartk.util.linewriter.LineWriter.blockWriterClassName</name>
                <description>Provides  the class name of a class that extends org.cleartk.util.linewriter.BlockWriter. The BlockWriter determines how blocks of annotations will be delimited. For example, org.cleartk.util.linewriter.block.BlankLineBlockWriter simply writes out a blank line between each block of annotations.  Example values that could be provided might include: 

org.cleartk.util.linewriter.block.BlankLineBlockWriter
org.cleartk.util.linewriter.block.DocumentIdBlockWriter
</description>
                <type>String</type>
                <multiValued>false</multiValued>
                <mandatory>false</mandatory>
            </configurationParameter>
        </configurationParameters>
        <configurationParameterSettings>
            <nameValuePair>
                <name>org.cleartk.util.linewriter.LineWriter.outputAnnotationClassName</name>
                <value>
                    <string>org.apache.uima.jcas.tcas.Annotation</string>
                </value>
            </nameValuePair>
            <nameValuePair>
                <name>org.cleartk.util.linewriter.LineWriter.annotationWriterClassName</name>
                <value>
                    <string>org.cleartk.util.linewriter.annotation.CoveredTextAnnotationWriter</string>
                </value>
            </nameValuePair>
            <nameValuePair>
                <name>org.cleartk.util.linewriter.LineWriter.blockWriterClassName</name>
                <value>
                    <string>org.cleartk.util.linewriter.block.BlankLineBlockWriter</string>
                </value>
            </nameValuePair>
        </configurationParameterSettings>
        <typeSystemDescription>
            <imports>
                <import name="org.cleartk.TypeSystem"/>
            </imports>
        </typeSystemDescription>
        <capabilities/>
        <operationalProperties>
            <modifiesCas>true</modifiesCas>
            <multipleDeploymentAllowed>true</multipleDeploymentAllowed>
            <outputsNewCASes>false</outputsNewCASes>
        </operationalProperties>
    </analysisEngineMetaData>
</analysisEngineDescription>
