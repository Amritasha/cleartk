/*
 * Copyright (c) 2011, Regents of the University of Colorado 
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 
 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 
 * Neither the name of the University of Colorado at Boulder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE. 
 */
package org.cleartk.eval.provider;

import java.util.List;

import org.apache.uima.UIMAException;
import org.apache.uima.analysis_engine.AnalysisEngine;
import org.cleartk.eval.Evaluation_ImplBase;

/**
 * <br>
 * Copyright (c) 2011, Regents of the University of Colorado <br>
 * All rights reserved. <br>
 * 
 * @author Philip Ogren
 * @author Steven Bethard
 * @deprecated Use {@link Evaluation_ImplBase}
 */
@Deprecated
public interface CleartkPipelineProvider {

  /**
   * This method creates a pipeline of analysis engines that will create a training data for the
   * learner being used. This will generally include a
   * {@link org.cleartk.classifier.CleartkAnnotator} that is initialized with a
   * {@link org.cleartk.classifier.DataWriterFactory}. However, a number of other analysis engines
   * may also be required depending on what data from the gold-standard corpus is provided and what
   * needs to be generated. This aggregate analysis engine should generally operate on the
   * {@link ViewNames#GOLD_VIEW}.
   * 
   * @param name
   *          will generally be a value such as 'fold-01' or 'holdout'. It provides a name for this
   *          method to provide to the pipeline it returns that serves as a key for that pipeline.
   *          One expected use of the name is for naming a subdirectory that a data writer could use
   *          to write training data to.
   */
  public List<AnalysisEngine> getTrainingPipeline(String name) throws UIMAException;

  public void trainingPipelineComplete(String name, List<AnalysisEngine> engines)
      throws UIMAException;

  public void trainingComplete() throws UIMAException;

  /**
   * This method trains a model(s) for a given training pipeline (identified by name) using whatever
   * training data was generated as a result of running the training pipeline. If your task involves
   * only a single {@link org.cleartk.classifier.CleartkAnnotator} which runs off of a single
   * classification model, then this method will generally consist of a single line of code.
   * However, it is not uncommmon for a task to require many models. In such cases, this method
   * needs to know how to train each model that needs to be trained.
   * 
   * @param name
   *          will generally be a value such as 'fold-01' or 'holdout'. It provides a name for this
   *          method for the pipeline whose data we are training a model(s) for. One expected use of
   *          the name is to identify a subdirectory where training data is located.
   * @param trainingArguments
   *          arguments that are passed on to the classifiers model trainer.
   */
  public void train(String name, String... trainingArguments) throws Exception;

  /**
   * This method creates a pipeline of analysis engines that will run the task using the model(s)
   * generated by {@link #train(String, String...)}. This will generally include a
   * {@link org.cleartk.classifier.CleartkAnnotator} that is initialized with a
   * {@link org.cleartk.classifier.ClassifierFactory}. However, a number of other analysis engines
   * may also be required depending on what data from the gold-standard corpus is provided and what
   * needs to be generated. This pipeline of analysis engines should generally operate on the
   * {@link ViewNames#SYSTEM_VIEW}.
   */
  public List<AnalysisEngine> getClassifyingPipeline(String name) throws UIMAException;

  public void classifyingPipelineComplete(String name, List<AnalysisEngine> engines)
      throws UIMAException;

  public void classifyingComplete() throws UIMAException;
}
