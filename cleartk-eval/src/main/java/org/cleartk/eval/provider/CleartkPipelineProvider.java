/* 
 * This file was copied from edu.umn.biomedicus.evaluation.EngineFactory in the Biomedicus project (see http://biomedicus.googlecode.com).
 * The original file is made available under the ASL 2.0 with the following text:

 Copyright 2010 University of Minnesota  
 All rights reserved. 

 Licensed under the Apache License, Version 2.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 

 http://www.apache.org/licenses/LICENSE-2.0 

 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
 */

package org.cleartk.eval.provider;

import java.io.File;
import java.util.List;

import org.apache.uima.analysis_engine.AnalysisEngine;
import org.apache.uima.resource.ResourceInitializationException;
import org.cleartk.classifier.ClassifierFactory;
import org.cleartk.classifier.CleartkAnnotator;
import org.cleartk.classifier.DataWriterFactory;

/**
 * 
 * This interface provides methods which create two aggregate analysis engines - one for generating
 * training data and another for running the task for a given model that is trained using the train
 * method.
 * 
 * @author Philip Ogren
 * 
 */

public interface CleartkPipelineProvider {

  /**
   * This method creates an aggregate analysis engine that will create a training data file(s) for
   * the learner being used. This will generally include a {@link CleartkAnnotator} that is
   * initialized with a {@link DataWriterFactory}. However, a number of other analysis engines may
   * also be required depending on what data from the gold-standard corpus is provided and what
   * needs to be generated. This aggregate analysis engine should generally operate on the
   * {@link ViewNames#GOLD_VIEW}.
   * 
   * @param modelDirectory
   *          where all of the output data will go. This may either be a top-level directory for
   *          data output or may be the directory where training data is directly written to
   *          dependeing on the scenario.
   * @return
   * @throws ResourceInitializationException
   */
  public List<AnalysisEngine> getTrainingPipeline(String name)
      throws ResourceInitializationException;

  /**
   * This method trains a model(s) using the contents of the model directory. If your task involves
   * only a single {@link CleartkAnnotator} which runs off of a single classification model, then
   * this method will generally consist of a single line of code. However, it is not uncommmon for a
   * task to require many models. In such cases, this method needs to know how to train each model
   * that needs to be trained.
   * 
   * @param modelDirectory
   *          where all of the training data is.
   * @param trainingArguments
   *          arguments that are passed on to the classifiers model trainer.
   * @throws Exception
   */
  public void train(String name, String... trainingArguments) throws Exception;

  /**
   * This method creates an aggregate analysis engine that will run the task using the model(s)
   * generated by {@link #train(File, String...)}. This will generally include a
   * {@link CleartkAnnotator} that is initialized with a {@link ClassifierFactory}. However, a
   * number of other analysis engines may also be required depending on what data from the
   * gold-standard corpus is provided and what needs to be generated. This aggregate analysis engine
   * should generally operate on the {@link ViewNames#SYSTEM_VIEW}.
   * 
   * @param modelDirectory
   *          where the model(s) was built. Given the directory, the method should know how to find
   *          and load the model.
   * @return
   * @throws ResourceInitializationException
   */

  public List<AnalysisEngine> getClassifierPipeline(String name)
      throws ResourceInitializationException;

}
